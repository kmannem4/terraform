parameters:
- name: workingDirectory
  type: string
- name: artifactName
  type: string  
- name: azureClientId
  type: string
- name: azureTenantId
  type: string
- name: terraformVersion
  type: string
- name: useMSI
  type: boolean
  default: false
- name: azureClientSecret
  type: string 
  default: ""   
- name: varFile
  type: string
  default: ""  
- name: args
  type: string
  default: ""   
- name: destroy
  type: boolean
  default: false  


steps: 
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: "Install Terraform"
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}
  - script: >
      planArgs=()

      if [[ ${{ parameters.destroy }} = True ]]; then
        planArgs+=(-destroy)
      fi

      if [[ ! -z "${{ parameters.varFile }}" ]]; then
        planArgs+=(-var-file=${{ parameters.varFile }})
      fi

      if [[ ! -z "${{ parameters.args }}" ]]; then      
        planArgs+=(${{ parameters.args }})
      fi

      echo terraform plan -out tfplan.out "${planArgs[@]}"

      terraform plan -out tfplan.out "${planArgs[@]}" -lock-timeout=180s
    env:
      ARM_USE_AZUREAD: 1
      ARM_CLIENT_ID: ${{ parameters.azureClientId }}
      ARM_TENANT_ID: ${{ parameters.azureTenantId }}
      ARM_SKIP_PROVIDER_REGISTRATION: true
      ${{ if eq(parameters.useMSI, true) }}:
        ARM_USE_MSI: 1
      ${{ if ne(parameters.azureClientSecret, '') }}:
        ARM_CLIENT_SECRET: ${{ parameters.azureClientSecret}}   
    workingDirectory: ${{ parameters.workingDirectory }}
    displayName: 'Terraform Plan'   
  - task: PublishPipelineArtifact@0
    displayName: "Publish Artifacts"
    inputs:
      targetPath: ${{ parameters.workingDirectory }}
      artifactName: ${{ parameters.artifactName }}
      publishLocation: "pipeline"